---
import { Image } from "astro:assets";
import type { ComponentProps } from "astro/types";
import clsx from "clsx";
import Grid from "../../Grid.astro";
import Icon from "../../Icon.astro";

interface ImageItem {
  title: string;
  thumbnail: string | ComponentProps<typeof Image>["src"];
  url: string;
}

interface Props {
  items: ImageItem[];
  columns?: number;
  className?: string;
}

const { items, columns = items.length, className } = Astro.props;

const columnSizes = { xs: 1, sm: 2, lg: columns ?? items.length };
const sliderColumnAttributes = Object.entries(columnSizes).reduce(
  (attrs, [size, numColumns]) => {
    return {
      ...attrs,
      [`data-columns-${size}`]: numColumns,
    };
  },
  {},
);
---

<grid-slider
  class="relative block"
  data-items-count={items.length}
  {...sliderColumnAttributes}
>
  <div class="slider-container w-full overflow-hidden">
    <Grid
      columns={{
        xs: [`repeat(${items.length}, 100%)`],
        sm: [`repeat(${items.length}, calc(50% - (1.875rem / 2)))`],
        lg: [
          `repeat(${items.length}, calc(${100 / columnSizes.lg}% - ${(1.875 * (items.length - 1)) / items.length}rem))`,
        ],
      }}
      className={clsx("slider-track gap-xl grid-flow-col", className)}
    >
      {
        items.map(({ title, thumbnail, url }) => (
          <a href={url} class="thumbnail">
            {typeof thumbnail === "string" ? (
              <span>
                <img src={thumbnail} alt="" loading="lazy" />
              </span>
            ) : (
              <span>
                <Image src={thumbnail} alt="" loading="lazy" />
              </span>
            )}
            {title}
          </a>
        ))
      }
    </Grid>
  </div>
  <button
    type="button"
    class="slider-prev slider-button left-[-10px] sm:left-[-1em]"
    disabled
  >
    <Icon icon="chevronLeft" alt="Previous slide" />
  </button>
  <button
    type="button"
    class="slider-next slider-button right-[-10px] sm:right-[-1em]"
    disabled
  >
    <Icon icon="chevronRight" alt="Next slide" />
  </button>
</grid-slider>
<script>
  class Slider extends HTMLElement {
    #track: HTMLElement | null = null;
    #nextButton: HTMLElement | null = null;
    #prevButton: HTMLElement | null = null;

    constructor() {
      super();

      this.#track = this.querySelector(".slider-track");
      this.#nextButton = this.querySelector(".slider-next");
      this.#prevButton = this.querySelector(".slider-prev");
    }

    connectedCallback() {
      const { itemsCount, columnsXs, columnsSm, columnsLg } = this.dataset;
      if (
        !this.#track ||
        !itemsCount ||
        !columnsXs ||
        !columnsSm ||
        !columnsLg
      ) {
        return;
      }

      let currentIndex = 0;
      let columns: number;
      let totalSlides: number;

      const calculateColumns = () => {
        let newColumns: number;
        if (window.innerWidth > 992) {
          newColumns = parseInt(columnsLg);
        } else if (window.innerWidth > 576) {
          newColumns = parseInt(columnsSm);
        } else {
          newColumns = parseInt(columnsXs);
        }

        if (newColumns !== columns) {
          currentIndex = 0;
          columns = newColumns;
          totalSlides = Math.ceil(parseInt(itemsCount) / columns);
        }
      };

      const updateSlidePosition = () => {
        calculateColumns();

        if (this.#track) {
          this.#track.style.transform = `translateX(calc(-${100 * currentIndex}% - ${1.875 * currentIndex}rem))`;
        }

        if (currentIndex === 0) {
          this.#prevButton?.setAttribute("disabled", "disabled");
        } else {
          this.#prevButton?.removeAttribute("disabled");
        }

        if (currentIndex < totalSlides - 1) {
          this.#nextButton?.removeAttribute("disabled");
        } else {
          this.#nextButton?.setAttribute("disabled", "disabled");
        }
      };

      this.#prevButton?.addEventListener("click", () => {
        if (currentIndex > 0) {
          currentIndex--;
          updateSlidePosition();
        }
      });

      this.#nextButton?.addEventListener("click", () => {
        if (currentIndex < totalSlides - 1) {
          currentIndex++;
          updateSlidePosition();
        }
      });

      window.addEventListener("resize", () => {
        updateSlidePosition();
      });

      updateSlidePosition();
    }
  }

  customElements.define("grid-slider", Slider);
</script>
<style>
  .thumbnail {
    display: block;
    font-size: theme(fontSize.secondary);
    color: inherit;
    text-decoration: none;
  }

  .thumbnail:hover {
    text-decoration: underline;
  }

  .thumbnail span {
    display: flex;
    align-items: center;
    aspect-ratio: 16/9;
    overflow: hidden;
    background-color: #000;
    margin-bottom: theme(spacing.sm);
  }

  .thumbnail :global(img) {
    width: 100%;
  }

  .slider-track {
    transition: transform 200ms;
  }

  .slider-button {
    cursor: pointer;
    background-color: white;
    font-size: 22px;
    width: 2em;
    height: 2em;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 2em;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.25);
    position: absolute;
    top: 50%;
    margin-top: -1em;
    transition: opacity 100ms;
  }

  .slider-button:disabled {
    pointer-events: none;
    opacity: 0;
  }
</style>
